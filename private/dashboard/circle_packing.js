/* javascript for the circle packing viz */

// file path for data file
var dataFile = "MT_ipod.csv"

// use this variable to specify the name of the column
// that has the node attribute you want to size by
var sizeParam = "idea_oscore";

var w = 1280, //width of the svg
h = 800, //height of the svg
r = 750, //size of the layout
xScale = d3.scale.linear().range([0, r]), //scale to remap x coordinates when zoomed
yScale = d3.scale.linear().range([0, r]), //scale to remap y coordinates when zoomed
node; //variable needed for zoom     

//initializing the d3 layout for circle packing
var pack = d3.layout.pack()
  .size([r, r]) //the size of the layout
  .value(function(d) {return d.size}) //returns the size of all of the nodes through the csv file.

//making a svg, and then moving it.
var vis = d3.select("body")
  .insert("svg:svg", "h2")
  .attr("width", w)
  .attr("height", h)
  .append("svg:g")
  .attr("transform", "translate(" + (w - r) / 4 + "," + (h - r) / 4 + ")");

//this code reads the csv file and then puts it into the viz
d3.text(dataFile, function(error, unparsedData) {

  //parses the data into object array
  var data = d3.csv.parse(unparsedData);

  /* the below code parses the csv and creates a hierarchical json to feed into the viz */
  //d3.map to keep track of objects
  var name_to_node = d3.map();
  //root node that will be the data in the end
  root = { name: 'Root', children: [] };

  //loops through the data array and matches parents with children
  //constructs the data tree
  for(var x = 0; x < data.length; x++) {
    //variables that pull the necessary data
    var parent_label = data[x].parent_label;
    var child = data[x].idea_label;
    var size = parseInt(data[x][sizeParam]); 

    //these if/else statements check if the parent is already in the tree and if not, adds it in.
    var parent_node;
    if(name_to_node.has(parent_label)) {
      parent_node = name_to_node.get(parent_label);
    }
    else {
      parent_node = {name: parent_label};
      name_to_node.set(parent_label, parent_node);
      root.children.push(parent_node);
    }

    //makes the child node and puts it into the map
    //adds it to the children array of it's parent.
    var child_node = {name: child, size: size};
    name_to_node.set(child, child_node);
    name_to_node.get(child);
    if(parent_node.children instanceof Array) {
      parent_node.children.push(child_node);
    }
    else {
      parent_node.children = [];
      parent_node.children.push(child_node);
    }
  }

  //this sets the first node of the data to the root of the hierarchy. 
  node = root;

  //sets a variable to hold the nodes of the pack layout - node array is generated from the root file.
  var nodes = pack.nodes(root);

  //selects all of the circles
  vis.selectAll("circle")
    //gets the data for the circles from the node array
    .data(nodes)
    .enter()
    .append("svg:circle")
    //if the node has children, classify it as a parent, if not, it is a child
    .attr("class", function(d) { return d.children ? "parent" : "child"; })
    //returns the (x,y) coordinates and the radius of the circles that has been generated by the layout
    .attr("cx", function(d) { return d.x; })
    .attr("cy", function(d) { return d.y; })
    .attr("r", function(d) { return d.r; })
    //this creates the hover div tooltip when the circles are moused over
    .on("mouseover", function(d) {
      //the variables for the (x,y) position of the tooltip depending on the location of the circles
      var xPosition = parseFloat(d3.select(this).attr("cx"));
      var yPosition = parseFloat(d3.select(this).attr("cy"));
      //selects the tooltip and sets its location and the value that goes inside it
      d3.select("#tooltip")
        .style("left", xPosition + "px")
        .style("top", yPosition + "px")
        .select("#value")
        .text(d.name);

        //changes the tooltip to visable
        d3.select("#tooltip").classed("hidden", false);
    })
    //when the mouse leaves the circle, the hidden class is added back on and the div disappears
    .on("mouseout", function() {
      d3.select("#tooltip").classed("hidden", true);
    })
    //when the circles are clicked they are zoomed in on
    .on("click", function(d) { return zoom(node == d ? root : d); 
  });
    
  //this states that when the window is clicked it will zoom in on the node that was clicked
  d3.select(window).on("click", function() { zoom(root); });
});

//this is the zoom function that is used to zoom in on the circles
function zoom(d, i) {
  var k = r / d.r / 2;
  //this rescales the layout
  xScale.domain([d.x - d.r, d.x + d.r]);
  yScale.domain([d.y - d.r, d.y + d.r]);

  //this transitions the zoom
  var t = vis.transition()
    .duration(d3.event.altKey ? 7500 : 750);

  //this selects all of the circles and returns their rescaled sizes and radii
  t.selectAll("circle")
    .attr("cx", function(d) { return xScale(d.x); })
    .attr("cy", function(d) { return yScale(d.y); })
    .attr("r", function(d) { return k * d.r; });

  //sets node to the new just clicked node so that it zooms
  node = d;
  d3.event.stopPropagation();
}